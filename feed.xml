<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jason Joo</title>
    <link href="https://jasonjoo2010.github.io/feed.xml" rel="self" />
    <link href="https://jasonjoo2010.github.io/" />
    <updated>2020-11-30T20:56:38+08:00</updated>
    <id>https://jasonjoo2010.github.io/</id>
    <entry>
        <title type="html"><![CDATA[Abnormal CPU Usage After Upgrading to Big Sur(11.0.1)]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2020/11/30/abnormal_cpu_consumption_big_sur.html"/>
        <published>2020-11-30T00:00:00+08:00</published>
        <updated>2020-11-30T20:56:38+08:00</updated>
        <id>https://jasonjoo2010.github.io/2020/11/30/abnormal_cpu_consumption_big_sur.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/big-sur/" term="Big Sur" label="Big Sur" />
        <category scheme="https://jasonjoo2010.github.io/tag/osx/" term="OSX" label="OSX" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Background</h1>
<p>I upgraded to Big Sur several days ago. There were still some annoying issues under Catalina after several releases. For instance the <code>Mail.app</code> may occupy over 200% CPU and its memory consumption keep raising. I have seen it consumed about 35GB of memory. And the conditions causing it are unknown. I have tried even reimport all the mails. To take a rest from keeping attention on its memory consumption I wrote a cron job to do monitoring. It ran every 5 minutes and would kill it if it consumed more than 2 GB memory. When I saw the dot of Mail.app in the dock disappeared I knew that it was killed on the way of out of control. It&#39;s a tricky solution.</p>
<p>So when I saw the new release called Big Sur I thought of the risk for a while. I really wanted my Mail.app issue solved but no more nasty bugs. Finally I did the upgrading.</p>

<h1 id="toc_1">After Upgrading</h1>
<p>Upgrading process cost me about an hour and be honestly I don&#39;t like the new style of UI which makes me feeling like my 2015mid MBP turns to be an iPad pro.</p>
<p>But anyway it&#39;s amazing the Mail.app issue seems disappeared after recreating all my mail accounts(There was still a long way before this). But something was wrong that the fan just didn&#39;t stop for a while, kept working hard. I opened the monitor and found <code>secd</code> process consume 100% CPU.</p>
<p>Life is too hard for me.</p>
<p>Details can be reached <a href="https://discussions.apple.com/thread/252054223?login=true">here</a>.</p>

<h1 id="toc_2">Temporary Workaround</h1>
<p>Instead trying to relogin my iCloud account I made a temporary workaround. I wrote another cron job to kill <code>cloudd</code> periodically which makes it easier waiting a new release of Big Sur.</p>
<p>My script is:</p>
<div class="highlight"><pre><span></span><span class="ch">#!/bin/sh</span>

<span class="nv">PID</span><span class="o">=</span><span class="k">$(</span>pgrep -u <span class="nv">$UID</span> ^cloudd$<span class="k">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;no</span><span class="nv">$PID</span><span class="s2">&quot;</span> <span class="o">=</span> <span class="s2">&quot;no&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">exit</span>
<span class="k">fi</span>
<span class="nb">kill</span> <span class="nv">$PID</span>

sleep <span class="m">30</span>
<span class="nv">PID</span><span class="o">=</span><span class="k">$(</span>pgrep -u <span class="nv">$UID</span> ^cloudd$<span class="k">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;no</span><span class="nv">$PID</span><span class="s2">&quot;</span> <span class="o">=</span> <span class="s2">&quot;no&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">exit</span>
<span class="k">fi</span>
<span class="nb">kill</span> <span class="nv">$PID</span>
</pre></div>
<p>Save it to your home directory (eg. <code>~/check_cloudd</code>) and grant it executable by</p>
<div class="highlight"><pre><span></span>chmod +x ~/check_cloudd
</pre></div>
<p>You can add it into your cron by</p>
<div class="highlight"><pre><span></span>crontab -e
</pre></div>
<p>and take this for reference (use your own path)</p>

<pre><code>* * * * * ~/check_cloudd</code></pre>
<p>It will kill <code>cloudd</code> every 30 seconds.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[GoSchedule v0.1.2]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2020/06/30/goschedule.html"/>
        <published>2020-06-30T00:00:00+08:00</published>
        <updated>2020-11-30T08:44:31+08:00</updated>
        <id>https://jasonjoo2010.github.io/2020/06/30/goschedule.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/golang/" term="golang" label="golang" />
        <category scheme="https://jasonjoo2010.github.io/tag/scheduling/" term="scheduling" label="scheduling" />
        <category scheme="https://jasonjoo2010.github.io/tag/distributed/" term="distributed" label="distributed" />
        <category scheme="https://jasonjoo2010.github.io/tag/concurrent/" term="concurrent" label="concurrent" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Introduction</h1>
<p>We have some distributed jobs which is scheduled between different application processes (nodes). So how to make them high available and well balanced is important. In Java we have <a href="https://jasonjoo2010.github.io/2019/07/31/tbschedule.html">tbschedule</a> and we also have some applications in GoLang.</p>
<p>So this is a distributed scheduling library in GoLang like tbschedule in Java.</p>

<h1 id="toc_1">Project</h1>
<p>Project home: <a href="https://github.com/jasonjoo2010/goschedule">github.com/jasonjoo2010/goschedule</a></p>
<p><img src="https://github.com/jasonjoo2010/goschedule/raw/master/doc/design.png" alt="Design"/></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[An Efficient Way to Detect h264 Video Format]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2020/06/22/how_to_detect_h264_video_format.html"/>
        <published>2020-06-22T00:00:00+08:00</published>
        <updated>2020-06-22T16:18:59+08:00</updated>
        <id>https://jasonjoo2010.github.io/2020/06/22/how_to_detect_h264_video_format.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/h264/" term="h264" label="h264" />
        <category scheme="https://jasonjoo2010.github.io/tag/video/" term="video" label="video" />
        <category scheme="https://jasonjoo2010.github.io/tag/mpeg/" term="mpeg" label="mpeg" />
        <category scheme="https://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Background</h1>
<p>We want to introduce short video clips as a new business into our product. For a startup we have numbers of videos which have length in time from 50 seconds to more than 5 minutes.</p>
<p>But there is a problem importing them into the new business: Some of them aren&#39;t in h264 format which will not be supported in mobiles. We need to convert them into h264 before importing. So we need an efficient way to &ldquo;scan&rdquo; and pick them out then convert them into compatible format.</p>

<h1 id="toc_1">ffmpeg Way</h1>
<p>The first tool comes into mind is <code>ffmpeg</code>. We can download them first and use ffmpeg to get the video information to make the conclusion. But it will cost so much bandwidth and time to do so. So we pick it as an option if we don&#39;t find any more efficient way.</p>

<h1 id="toc_2">MPEG Structure</h1>
<p>After researching on how data is organized in MPEG file[1][2] we found that there are only quite small size data which is needed to decide encoding of video stream. We don&#39;t need to read the whole file actually.</p>
<p>The MPEG file is organized by <code>boxes</code>. Each box represents different meta information and we can skip from one box to another according to the header of box. By doing this we can traverse the whole file by several small reads each read can be limited under 10kB. The box tree is demonstrated below:</p>
<p><img src="boxes.jpg" alt="Box Tree"/></p>
<p>Demo code could be reached at <a href="https://github.com/jasonjoo2010/h264-detector">github.com/jasonjoo2010/h264-detector</a></p>

<h1 id="toc_3">Reference</h1>
<p>[1] ISO/IEC base media file format <a href="https://en.wikipedia.org/wiki/ISO/IEC_base_media_file_format">en.wikipedia.org/wiki/ISO/IEC_base_media_file_format</a><br/>
[2] ISO 14496-1 Media Format <a href="http://xhelmboyx.tripod.com/formats/mp4-layout.txt">xhelmboyx.tripod.com/formats/mp4-layout.txt</a>  </p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[dubbo GC Optimization]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2019/11/08/dubbo-gc-optimization.html"/>
        <published>2019-11-08T00:00:00+08:00</published>
        <updated>2020-06-22T16:31:55+08:00</updated>
        <id>https://jasonjoo2010.github.io/2019/11/08/dubbo-gc-optimization.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/dubbo/" term="dubbo" label="dubbo" />
        <category scheme="https://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <category scheme="https://jasonjoo2010.github.io/tag/gc/" term="gc" label="gc" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Background</h1>
<p>One business unit in our teams has a technical stack of DUBBO/SpringBoot/Nginx. They have a traffic over 2000 requests/sec and 300 requests/sec(QPS) per instance serving through HTTP. Several DUBBO invocations might be made during one request. The average response time(RT) for top 2 entries is 6.23ms / 250ms. And the RT may increase to 50ms / 600ms in peak minutes.</p>
<p>So they have already figured to optimize it for days.</p>

<h1 id="toc_1">Invocation chain optimization</h1>
<p>First we checked and analysis the invocation chain. In most cases unstable RT may first due to the inefficient link chain: short connection, overflowed connection table, inappropriate send/recv buffer, synchronous IO waiting, problematic internal network and so on.</p>

<h2 id="toc_2">NGINX</h2>
<p>The first spot of the incoming traffic is the NGINX nodes. They maintain the connections used by HTTP requests from clients(APP or partner) directly. </p>
<p>The <code>keepalive</code> is set to 3 seconds and I increase it to 10 seconds to make a longer life of them avoiding unnecessary reconnecting. And it can be observed that the count connections between NGINX and java applications is still an unignore level.</p>
<p>To make them persistent I add <code>keepalive 60</code> configuration into the <code>upstream</code> block in nginx configuration and 
<code>
proxy_http_version 1.1;
proxy_set_header Connection &quot;&quot;;
</code>
to proxying configuration to enable HTTP1.1 and connection pool (holding) feature. Please pay attention that the <code>keepalive</code> here is not the same meaning in other scenario which means the maximum connections held on during serving. So we set it into 60 and actually they will not be shared between nginx workers. And the upstream nodes must support keepalive feature which is available from HTTP1.1 and we must add the <code>Connection</code> header to support it.</p>
<p>After enabling HTTP1.1 between NGINX and java applications the connections became more &ldquo;persistent&rdquo; and the RT reduced to 2.6ms / 260ms in average. And we also make it smoother in peak minutes.</p>
<p>During this process I found that though it has gain a better performance in RT it still costs so much CPU time and especially high cpu switching count.</p>

<h1 id="toc_3">Asynchronous</h1>
<p>To reduce the switching count I dig into the instance process more and found there was a thread pool with over 500 threads in it. It&#39;s used to accelerate the request processing on parallel invocation of DUBBO/Http. </p>
<p>Actually thread pool should not be introduced here because all runnable threads are still waiting for the responses and asynchronous model should be used here. HttpClient can be enhanced by introducing <code>async-http-client</code> and DUBBO invocation can be called in asynchronous way. All we need to do is to dispatch the asynchronous calls out and to wait them to complete/fail.</p>
<p>RT had been reduced to 2.3ms / 170ms after this.</p>
<p>And again my eyes are on the frequency of YGC of JVM.</p>

<h1 id="toc_4">YGC frequency</h1>
<p>They had optimized the JVM arguments on memory quota with <code>mx=1400m ms=1400m mn=1g</code> after a few iterations to avoid unnecessary old generation space and more eden space.</p>
<p>Instance under average QPS(about 500 in average, with 800MB in memory) the YGC cycle keep a period about 30~38 seconds. Because the codes are quite simple and optimized I feel a little curious on what kinds of short-lifetime objects are in the Eden.</p>
<p>After some attempts of sampling the result is shown below including unreachable objects:</p>
<p><img src="pic1.png" alt="Count of unreachable objects"/></p>
<p>Here we can see the top N types of objects in retaining of memory and found that the curve of it is very steep and clustered in <code>char[]</code> / <code>byte[]</code> / <code>String</code>.</p>

<h2 id="toc_5">Temporary Objects in Heap</h2>
<p>We can see visually there are obvious topN head in count of the objects in heap as below:</p>
<p><img src="pic2.png" alt="Unreachable char array"/></p>
<p>There are mainly two reasons generating so many <code>char[]</code> / <code>string</code>:</p>

<ol>
<li>There are many joint of string for configuration name like <code>version</code> and <code>default.version</code> which is joined by <code>default.</code> and <code>version</code>. We can avoid it by build a LRU cache for it.</li>
<li>There is unnecessary temporary object in monitor filter. We can rewrite it to reuse object.</li>
</ol>
<p>By doing this we got a new chart:</p>
<p><img src="pic3.png" alt="After optimization"/></p>
<p>It showed that the top N objects isn&#39;t significant any more. And the FGC period is triple than before.</p>

<h1 id="toc_6">Remained</h1>
<p>Though the YGC is improved a lot but there are still some space to go further. We captured another objects unreachable <code>byte[]</code>:</p>
<p><img src="pic4.png" alt="bytes"/></p>
<p><img src="pic5.png" alt="chars"/></p>

<h2 id="toc_7">URL</h2>
<p><code>URL</code> is an issued design because it&#39;s designed to be immutable now and every modification on it will generates a new instance. So related blocks should be paid more attention and better to use <code>URLBuilder</code> obviously.</p>

<h2 id="toc_8">Hessian2</h2>
<p><code>Hessian2ObjectInput</code> / <code>Hessian2ObjectOutput</code> are heavy and can cause visible pressure to YGC on a high QPS instance. So making them reusable or any other optimization is a worth thing in future. Surely for those default serialization protocol users.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[TBSchedule 4.1.2 Finally Released]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2019/07/31/tbschedule.html"/>
        <published>2019-07-31T00:00:00+08:00</published>
        <updated>2019-07-31T17:44:30+08:00</updated>
        <id>https://jasonjoo2010.github.io/2019/07/31/tbschedule.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/scheduling/" term="scheduling" label="scheduling" />
        <category scheme="https://jasonjoo2010.github.io/tag/distributed/" term="distributed" label="distributed" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Intro</h1>
<p>TBSchedule is a non-centralised, zookeeper adapted, console included, task/strategy supported and light-weight scheduling-in-place library from taobao(taobao.com). It was released as an open source project in about (2010~2012) by Taobao in the website <code>http://code.taobao.org/p/tbschedule</code> (But it has been down in 2017), with no license given. And after that it seems that there is no further developing on it.</p>
<p>It&#39;s not a common distributed scheduling framework like ones support external shell, uploaded jars, cross languages and etc. Its main purpose is the scenarios of spring-quartz but don&#39;t settle for quartz&#39;s design of <code>High Availability</code> and <code>Clustering</code>. It&#39;s another choice to try with.</p>
<p>Project location(Under Apache® License): <a href="https://github.com/jasonjoo2010/tbschedule">github.com/jasonjoo2010/tbschedule</a></p>

<h1 id="toc_1">Evolution</h1>

<h2 id="toc_2">Traditional Versions (3.3.3.2 and earlier)</h2>
<p>It uses <code>zookeeper</code> communicating with zookeeper server directly and sometimes suffers jitters on unstable connections. Surely only zookeeper storage is supported.</p>
<p>A console server is provided as a client tool to manage the strategies, tasks and do operations under specified namespace.</p>
<p>But there are problems in integrating:
* Use log4j for logging but not interface.
* Console is mixed with core library.
* Workers&#39; distribution always includes the leader node. Which leads heavier load on leader.
* Some small bugs when do operations.</p>

<h2 id="toc_3">Enhanced Versions (3.3.4 to 4.0.x)</h2>
<p>Enhanced versions solve all the problem in traditional version and:</p>

<ul>
<li>Separate console to an individual module.</li>
<li>Make <code>zookeeper</code> up to date.</li>
<li>Integrate <code>slf4j</code> as logging library.</li>
<li>Shuffle first when do new scheduling.</li>
<li>Introduce extension module. (4.0.x)</li>
<li>Introduce <code>curator</code>. (4.0.x)</li>
<li>Restructure console into spring-boot project. (4.0.x)</li>
<li>Publish to maven central repository. (Under group id <code>com.yoloho.schedule</code>)</li>
</ul>
<p>So in 4.0.x you can use tbschedule easily (included in central repo) and logging friendly (slf4j) and more balanced (workers load balancing). If you implement queue consumer using Redis&#39; list you can easily use <code>tbschedule-extension-task</code> to do it.</p>
<p>But it&#39;s not the end.</p>
<p>For <code>more adaptive</code>, it&#39;s not enough to support zookeeper only. It should change depend on what the project use. For example a redis/jdbc only project we should not have to introduce a zookeeper cluster for scheduling. And also we should provide easier ways to integrate like xml/annotations.</p>
<p>For <code>more international</code>, we should make more documentation using english.</p>
<p>For <code>more reliable</code>, we should write more unit tests.</p>
<p>For <code>learn easily</code>, we should provide some demonstrations.</p>
<p>So that&#39;s why 4.1.x is raised.</p>

<h2 id="toc_4">Multiple Storages (4.1.x)</h2>
<p>Over half of codes have been restructured. <code>SPI</code> is used to support different <code>default</code> storage implementation and it also can be specified manually. Which means we can use multiple storages together in single project (If there&#39;s such scenario, eg. memory and zookeeper together).</p>
<p>Here are storages supported:</p>

<ul>
<li>Memory. For local only scheduling driven by annotations. (EnableScheduleMemory/Strategy/Task)</li>
<li>Zookeeper. (By <code>curator-framework</code>)</li>
<li>Redis. (By <code>enhanced-cache</code>)</li>
</ul>
<p><code>JDBC</code> is on the way.</p>
<p>In spring boot it&#39;s easy to initialize:</p>
<div class="highlight"><pre><span></span><span class="nd">@EnableSchedule</span><span class="p">(</span>
    <span class="c1">// Storage is zookeeper by default</span>
    <span class="n">address</span> <span class="o">=</span> <span class="s">&quot;192.168.123.106:2181&quot;</span><span class="p">,</span>
    <span class="n">rootPath</span> <span class="o">=</span> <span class="s">&quot;/test/demo/tmp&quot;</span><span class="p">,</span>
    <span class="n">username</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">,</span>
    <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
<span class="p">)</span>
</pre></div>
<p>And then you can raise a <code>console</code> instance locally which has been packed and uploaded into maven central repository to manage the tasks and strategies.</p>
<p>Details please refer to: <a href="https://github.com/jasonjoo2010/tbschedule">github.com/jasonjoo2010/tbschedule</a></p>

<h1 id="toc_5">Summary</h1>
<p>It borns to be a light-weight and flexible scheduling and hope it could be a good choice on this.</p>
<p>Thanks to the <code>Taobao&#39;s tbschedule</code>. Thanks to their spirit of open source. Thanks to Xuannan who has done most of the contribution of Taobao&#39;s tbschedule.</p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[&quot;No subject alternative names present&quot; on New JDK]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2019/04/19/no_subject_alternative_names_present.html"/>
        <published>2019-04-19T00:00:00+08:00</published>
        <updated>2019-11-25T17:53:36+08:00</updated>
        <id>https://jasonjoo2010.github.io/2019/04/19/no_subject_alternative_names_present.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/ssl/" term="ssl" label="ssl" />
        <category scheme="https://jasonjoo2010.github.io/tag/ldaps/" term="ldaps" label="ldaps" />
        <category scheme="https://jasonjoo2010.github.io/tag/jdk/" term="jdk" label="jdk" />
        <category scheme="https://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Abstract</h1>
<p>In newer JDK implemetation(maybe JDK &gt;= 8) you may suffer a CertificateException of &ldquo;No subject alternative names present&rdquo; when trying to create a TLS/SSL connection before you make Encrypted/HTTPS/LDAPS request.  </p>
<p>A new property named <code>com.sun.jndi.ldap.object.disableEndpointIdentification</code> has been introduced in new JDK versions (tested in JDK 11 compared to JDK 8) to decide whether make additional verification of endpoint name to certificate provided by server. The problem is that it will turn on by default. So if you suffering the problem you may try one of the solutions below:  </p>

<ol>
<li>Set the property of <code>com.sun.jndi.ldap.object.disableEndpointIdentification</code> to false.</li>
<li>When you make plain TLS connections don&#39;t use <code>sslParameters.setEndpointIdentificationAlgorithm(&quot;HTTPS&quot;);</code> for your SSLSocket. (Not for LDAPS/HTTPS)</li>
<li>When you use <code>HttpsURLConnection</code> you can add your custom hostname verifier by <code>setDefaultHostnameVerifier</code>.</li>
<li>Sign the server certificate with SAN information in extension.(<strong>Recommended</strong>)</li>
</ol>
<p>Please noted that it&#39;s totally a different issue compared to <code>Self Signed Certificate Issue</code>.</p>

<h1 id="toc_1">First Meet It</h1>
<p>One of our project choose <code>docker-java</code>[1] enabling operations on remote <code>dockerd</code>. Connection is encrypted by TLS 1.2.  </p>
<p>Everything goes right before we switch the commend implementation from <code>Jersey</code> to <code>NettyDockerCmdExecFactory</code>. Because <code>ExeStartCmd</code> doesn&#39;t support stdin stream when using <code>Jersey</code> we switch into netty implementation.  </p>
<p>Then we meet the exception <code>No subject alternative names present</code> and can&#39;t communicate to server anymore. We are quite sure the connection can be established and encrypted smoothly when using jersey backend.  </p>
<p>After hours&#39; research we found that the exception was mainly targeting to the unsuitable certificate the server gave out. SSLContext will do additional hostname(or calling endpoint) verification after passed through <code>TrustManager[]</code>. Logic is located in <code>sun.security.util.HostnameChecker</code> with two form: <code>IP</code> and <code>Domain</code> matching with certificate(In this case it&#39;s IP).  </p>
<p>Checker will fetch <code>SAN</code> (Subject Alternative Names) from extension of certificate and compare it with the server actually ip address. Extension structure is defined with version 3 of X509 but our certificate is generated by some old scripts in version 1 and only have <code>CN=xxx.xxx.xxx.xxx</code> in Subject field. So the logic will fail and throw the exception.</p>
<p>Because the <code>jersey</code> backend works correctly so I guess it&#39;s not a required verification. Working a little more I figure out the key statement:  </p>
<div class="highlight"><pre><span></span><span class="n">sslParameters</span><span class="p">.</span><span class="na">setEndpointIdentificationAlgorithm</span><span class="p">(</span><span class="s">&quot;HTTPS&quot;</span><span class="p">);</span>
</pre></div>
<p>The netty backend adds the specific parameter manually which will enable the additional verification.  </p>
<p>There are two sulutions:</p>

<ol>
<li>Remove the line of <code>setEndpointIdentificationAlgorithm</code></li>
<li>Regenerate the certificate using version 3. Add the SAN information required in extension part.(Recommended)</li>
</ol>
<p>Knowing the reasons we regenerated the certificate following the rules.  </p>

<h1 id="toc_2">Meet It Again</h1>
<p>Things seem like going well but the same error happens again two days later. The affected logic is the connection of LDAP(Using SSL). It&#39;s strange because it works well before.  </p>
<p>Fortunately we can debug it in source code level (package <code>sun.security</code>) because we change the JDK to version 11 days ago. After some more time we arrived:  </p>
<p><code>sun.security.util.HostnameChecker</code>  </p>
<div class="highlight"><pre><span></span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">matchIP</span><span class="p">(</span><span class="n">String</span> <span class="n">expectedIP</span><span class="p">,</span> <span class="n">X509Certificate</span> <span class="n">cert</span><span class="p">)</span>
            <span class="kd">throws</span> <span class="n">CertificateException</span> <span class="p">{</span>
        <span class="n">Collection</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">subjAltNames</span> <span class="o">=</span> <span class="n">cert</span><span class="p">.</span><span class="na">getSubjectAlternativeNames</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">subjAltNames</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">CertificateException</span>
                                <span class="p">(</span><span class="s">&quot;No subject alternative names present&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">next</span> <span class="p">:</span> <span class="n">subjAltNames</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// For IP address, it needs to be exact match</span>
            <span class="k">if</span> <span class="p">(((</span><span class="n">Integer</span><span class="p">)</span><span class="n">next</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)).</span><span class="na">intValue</span><span class="p">()</span> <span class="o">==</span> <span class="n">ALTNAME_IP</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">String</span> <span class="n">ipAddress</span> <span class="o">=</span> <span class="p">(</span><span class="n">String</span><span class="p">)</span><span class="n">next</span><span class="p">.</span><span class="na">get</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">expectedIP</span><span class="p">.</span><span class="na">equalsIgnoreCase</span><span class="p">(</span><span class="n">ipAddress</span><span class="p">))</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="c1">// compare InetAddress objects in order to ensure</span>
                    <span class="c1">// equality between a long IPv6 address and its</span>
                    <span class="c1">// abbreviated form.</span>
                    <span class="k">try</span> <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">InetAddress</span><span class="p">.</span><span class="na">getByName</span><span class="p">(</span><span class="n">expectedIP</span><span class="p">).</span><span class="na">equals</span><span class="p">(</span>
                                <span class="n">InetAddress</span><span class="p">.</span><span class="na">getByName</span><span class="p">(</span><span class="n">ipAddress</span><span class="p">)))</span> <span class="p">{</span>
                            <span class="k">return</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">UnknownHostException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">SecurityException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">CertificateException</span><span class="p">(</span><span class="s">&quot;No subject alternative &quot;</span> <span class="o">+</span>
                        <span class="s">&quot;names matching &quot;</span> <span class="o">+</span> <span class="s">&quot;IP address &quot;</span> <span class="o">+</span>
                        <span class="n">expectedIP</span> <span class="o">+</span> <span class="s">&quot; found&quot;</span><span class="p">);</span>
    <span class="p">}</span>
</pre></div>
<p>Oh it enters into the <code>matchIP</code> too like we were in the first case. But the stack may be different. After more debugging:  </p>
<p><code>sun.security.ssl.SSLContextImpl</code></p>
<div class="highlight"><pre><span></span><span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">checkServerTrusted</span><span class="p">(</span><span class="n">X509Certificate</span><span class="o">[]</span> <span class="n">chain</span><span class="p">,</span> <span class="n">String</span> <span class="n">authType</span><span class="p">,</span>
            <span class="n">SSLEngine</span> <span class="n">engine</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">CertificateException</span> <span class="p">{</span>
        <span class="n">tm</span><span class="p">.</span><span class="na">checkServerTrusted</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span> <span class="n">authType</span><span class="p">);</span>
        <span class="n">checkAdditionalTrust</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span> <span class="n">authType</span><span class="p">,</span> <span class="n">engine</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkAdditionalTrust</span><span class="p">(</span><span class="n">X509Certificate</span><span class="o">[]</span> <span class="n">chain</span><span class="p">,</span> <span class="n">String</span> <span class="n">authType</span><span class="p">,</span>
                <span class="n">Socket</span> <span class="n">socket</span><span class="p">,</span> <span class="kt">boolean</span> <span class="n">isClient</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">CertificateException</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">socket</span><span class="p">.</span><span class="na">isConnected</span><span class="p">()</span> <span class="o">&amp;&amp;</span>
                                    <span class="n">socket</span> <span class="k">instanceof</span> <span class="n">SSLSocket</span><span class="p">)</span> <span class="p">{</span>

            <span class="n">SSLSocket</span> <span class="n">sslSocket</span> <span class="o">=</span> <span class="p">(</span><span class="n">SSLSocket</span><span class="p">)</span><span class="n">socket</span><span class="p">;</span>
            <span class="n">SSLSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sslSocket</span><span class="p">.</span><span class="na">getHandshakeSession</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">session</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="n">CertificateException</span><span class="p">(</span><span class="s">&quot;No handshake session&quot;</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// check endpoint identity</span>
            <span class="n">String</span> <span class="n">identityAlg</span> <span class="o">=</span> <span class="n">sslSocket</span><span class="p">.</span><span class="na">getSSLParameters</span><span class="p">().</span>
                                        <span class="n">getEndpointIdentificationAlgorithm</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">identityAlg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">identityAlg</span><span class="p">.</span><span class="na">length</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">String</span> <span class="n">hostname</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="na">getPeerHost</span><span class="p">();</span>
                <span class="n">X509TrustManagerImpl</span><span class="p">.</span><span class="na">checkIdentity</span><span class="p">(</span>
                                    <span class="n">hostname</span><span class="p">,</span> <span class="n">chain</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">identityAlg</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// try the best to check the algorithm constraints</span>
            <span class="n">AlgorithmConstraints</span> <span class="n">constraints</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">ProtocolVersion</span><span class="p">.</span><span class="na">useTLS12PlusSpec</span><span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="na">getProtocol</span><span class="p">()))</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">session</span> <span class="k">instanceof</span> <span class="n">ExtendedSSLSession</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">ExtendedSSLSession</span> <span class="n">extSession</span> <span class="o">=</span>
                                    <span class="p">(</span><span class="n">ExtendedSSLSession</span><span class="p">)</span><span class="n">session</span><span class="p">;</span>
                    <span class="n">String</span><span class="o">[]</span> <span class="n">peerSupportedSignAlgs</span> <span class="o">=</span>
                            <span class="n">extSession</span><span class="p">.</span><span class="na">getLocalSupportedSignatureAlgorithms</span><span class="p">();</span>

                    <span class="n">constraints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SSLAlgorithmConstraints</span><span class="p">(</span>
                                    <span class="n">sslSocket</span><span class="p">,</span> <span class="n">peerSupportedSignAlgs</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">constraints</span> <span class="o">=</span>
                            <span class="k">new</span> <span class="n">SSLAlgorithmConstraints</span><span class="p">(</span><span class="n">sslSocket</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">constraints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SSLAlgorithmConstraints</span><span class="p">(</span><span class="n">sslSocket</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">checkAlgorithmConstraints</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span> <span class="n">constraints</span><span class="p">,</span> <span class="n">isClient</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>
<p>It shows that the verification is relying the value of <code>sslSocket.getSSLParameters().getEndpointIdentificationAlgorithm();</code>.  </p>
<p>But we don&#39;t set it to any value when creating the ssl socket and printing its value also shows to <code>null</code>:  </p>
<div class="highlight"><pre><span></span><span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Socket</span> <span class="nf">createSocket</span><span class="p">(</span><span class="n">String</span> <span class="n">string</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="p">,</span> <span class="n">UnknownHostException</span> <span class="p">{</span>
        <span class="n">SSLSocketImpl</span> <span class="n">ssl</span> <span class="o">=</span> <span class="p">(</span><span class="n">SSLSocketImpl</span><span class="p">)</span><span class="n">socketFactory</span><span class="p">.</span><span class="na">createSocket</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
        <span class="n">SSLParameters</span> <span class="n">param</span> <span class="o">=</span> <span class="n">ssl</span><span class="p">.</span><span class="na">getSSLParameters</span><span class="p">();</span>
        <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="na">getEndpointIdentificationAlgorithm</span><span class="p">());</span>
        <span class="k">return</span> <span class="n">ssl</span><span class="p">;</span>
    <span class="p">}</span>
</pre></div>
<p>Console output:</p>

<pre><code>null</code></pre>
<p>So who sets it? After deeper tracing I arrived:  </p>
<p><code>com.sun.jndi.ldap.Connection</code></p>
<div class="highlight"><pre><span></span><span class="kd">private</span> <span class="n">Socket</span> <span class="nf">createSocket</span><span class="p">(</span><span class="n">String</span> <span class="n">host</span><span class="p">,</span> <span class="kt">int</span> <span class="n">port</span><span class="p">,</span> <span class="n">String</span> <span class="n">socketFactory</span><span class="p">,</span>
            <span class="kt">int</span> <span class="n">connectTimeout</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="p">{</span>

        <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">socketFactory</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">// create the factory</span>

            <span class="nd">@SuppressWarnings</span><span class="p">(</span><span class="s">&quot;unchecked&quot;</span><span class="p">)</span>
            <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">SocketFactory</span><span class="o">&gt;</span> <span class="n">socketFactoryClass</span> <span class="o">=</span>
                <span class="p">(</span><span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">SocketFactory</span><span class="o">&gt;</span><span class="p">)</span><span class="n">Obj</span><span class="p">.</span><span class="na">helper</span><span class="p">.</span><span class="na">loadClass</span><span class="p">(</span><span class="n">socketFactory</span><span class="p">);</span>
            <span class="n">Method</span> <span class="n">getDefault</span> <span class="o">=</span>
                <span class="n">socketFactoryClass</span><span class="p">.</span><span class="na">getMethod</span><span class="p">(</span><span class="s">&quot;getDefault&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span><span class="p">{});</span>
            <span class="n">SocketFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="p">(</span><span class="n">SocketFactory</span><span class="p">)</span> <span class="n">getDefault</span><span class="p">.</span><span class="na">invoke</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span><span class="p">{});</span>

            <span class="c1">// create the socket</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">connectTimeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

                <span class="n">InetSocketAddress</span> <span class="n">endpoint</span> <span class="o">=</span>
                        <span class="n">createInetSocketAddress</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>

                <span class="c1">// unconnected socket</span>
                <span class="n">socket</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="na">createSocket</span><span class="p">();</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">debug</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Connection: creating socket with &quot;</span> <span class="o">+</span>
                            <span class="s">&quot;a timeout using supplied socket factory&quot;</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="c1">// connected socket</span>
                <span class="n">socket</span><span class="p">.</span><span class="na">connect</span><span class="p">(</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">connectTimeout</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// continue (but ignore connectTimeout)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">socket</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">debug</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Connection: creating socket using &quot;</span> <span class="o">+</span>
                        <span class="s">&quot;supplied socket factory&quot;</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="c1">// connected socket</span>
                <span class="n">socket</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="na">createSocket</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">connectTimeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

                    <span class="n">InetSocketAddress</span> <span class="n">endpoint</span> <span class="o">=</span> <span class="n">createInetSocketAddress</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>

                    <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="p">();</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">debug</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Connection: creating socket with &quot;</span> <span class="o">+</span>
                            <span class="s">&quot;a timeout&quot;</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="n">socket</span><span class="p">.</span><span class="na">connect</span><span class="p">(</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">connectTimeout</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="c1">// continue (but ignore connectTimeout)</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">socket</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">debug</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">System</span><span class="p">.</span><span class="na">err</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">&quot;Connection: creating socket&quot;</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="c1">// connected socket</span>
                <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// For LDAP connect timeouts on LDAP over SSL connections must treat</span>
        <span class="c1">// the SSL handshake following socket connection as part of the timeout.</span>
        <span class="c1">// So explicitly set a socket read timeout, trigger the SSL handshake,</span>
        <span class="c1">// then reset the timeout.</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">socket</span> <span class="k">instanceof</span> <span class="n">SSLSocket</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SSLSocket</span> <span class="n">sslSocket</span> <span class="o">=</span> <span class="p">(</span><span class="n">SSLSocket</span><span class="p">)</span> <span class="n">socket</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IS_HOSTNAME_VERIFICATION_DISABLED</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">SSLParameters</span> <span class="n">param</span> <span class="o">=</span> <span class="n">sslSocket</span><span class="p">.</span><span class="na">getSSLParameters</span><span class="p">();</span>
                <span class="n">param</span><span class="p">.</span><span class="na">setEndpointIdentificationAlgorithm</span><span class="p">(</span><span class="s">&quot;LDAPS&quot;</span><span class="p">);</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">setSSLParameters</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">connectTimeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">socketTimeout</span> <span class="o">=</span> <span class="n">sslSocket</span><span class="p">.</span><span class="na">getSoTimeout</span><span class="p">();</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">setSoTimeout</span><span class="p">(</span><span class="n">connectTimeout</span><span class="p">);</span> <span class="c1">// reuse full timeout value</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">startHandshake</span><span class="p">();</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">setSoTimeout</span><span class="p">(</span><span class="n">socketTimeout</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">socket</span><span class="p">;</span>
    <span class="p">}</span>
</pre></div>
<p>So the last block rely to the value of <code>IS_HOSTNAME_VERIFICATION_DISABLED</code>, and:</p>
<div class="highlight"><pre><span></span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">IS_HOSTNAME_VERIFICATION_DISABLED</span>
            <span class="o">=</span> <span class="n">hostnameVerificationDisabledValue</span><span class="p">();</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hostnameVerificationDisabledValue</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">PrivilegedAction</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">act</span> <span class="o">=</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="p">.</span><span class="na">getProperty</span><span class="p">(</span>
                <span class="s">&quot;com.sun.jndi.ldap.object.disableEndpointIdentification&quot;</span><span class="p">);</span>
        <span class="n">String</span> <span class="n">prop</span> <span class="o">=</span> <span class="n">AccessController</span><span class="p">.</span><span class="na">doPrivileged</span><span class="p">(</span><span class="n">act</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prop</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">prop</span><span class="p">.</span><span class="na">isEmpty</span><span class="p">()</span> <span class="o">?</span> <span class="kc">true</span> <span class="p">:</span> <span class="n">Boolean</span><span class="p">.</span><span class="na">parseBoolean</span><span class="p">(</span><span class="n">prop</span><span class="p">);</span>
    <span class="p">}</span>
</pre></div>
<p>Things are clear. By default the property <code>com.sun.jndi.ldap.object.disableEndpointIdentification</code> is empty and the value will be set to <code>true</code> which means additional verification will be taken. But why the logic worked correctly before?  </p>
<p>I turn to <code>Open JDK 7/8</code> for source code reference and find they are lack of the final piece of code:  </p>
<div class="highlight"><pre><span></span><span class="c1">// For LDAP connect timeouts on LDAP over SSL connections must treat</span>
        <span class="c1">// the SSL handshake following socket connection as part of the timeout.</span>
        <span class="c1">// So explicitly set a socket read timeout, trigger the SSL handshake,</span>
        <span class="c1">// then reset the timeout.</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">socket</span> <span class="k">instanceof</span> <span class="n">SSLSocket</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">SSLSocket</span> <span class="n">sslSocket</span> <span class="o">=</span> <span class="p">(</span><span class="n">SSLSocket</span><span class="p">)</span> <span class="n">socket</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">IS_HOSTNAME_VERIFICATION_DISABLED</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">SSLParameters</span> <span class="n">param</span> <span class="o">=</span> <span class="n">sslSocket</span><span class="p">.</span><span class="na">getSSLParameters</span><span class="p">();</span>
                <span class="n">param</span><span class="p">.</span><span class="na">setEndpointIdentificationAlgorithm</span><span class="p">(</span><span class="s">&quot;LDAPS&quot;</span><span class="p">);</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">setSSLParameters</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">connectTimeout</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">socketTimeout</span> <span class="o">=</span> <span class="n">sslSocket</span><span class="p">.</span><span class="na">getSoTimeout</span><span class="p">();</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">setSoTimeout</span><span class="p">(</span><span class="n">connectTimeout</span><span class="p">);</span> <span class="c1">// reuse full timeout value</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">startHandshake</span><span class="p">();</span>
                <span class="n">sslSocket</span><span class="p">.</span><span class="na">setSoTimeout</span><span class="p">(</span><span class="n">socketTimeout</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">socket</span><span class="p">;</span>
    <span class="p">}</span>
</pre></div>
<p>That&#39;s the key point.</p>

<h1 id="toc_3">Conclusion</h1>

<ol>
<li>When you get <code>No subject alternative names present</code> you should make sure the server certificate is in version 3 and has the proper SAN field value in extension.</li>
<li>Related project upgraded from older JDK to JDK11 (JDK9 has not been tested in current case) may hit the problem. You can try to disable it by set property <code>com.sun.jndi.ldap.object.disableEndpointIdentification</code> to <code>false</code>.</li>
<li>For manually created ssl connections you can enable/disable by setting the parameter <code>endpointIdentificationAlgorithm</code> of SSLSocket. Its value can only be <code>SSL</code>/<code>LDAPS</code>. <code>SSL</code> is for all the non-ldap connections.</li>
</ol>
<p>It&#39;s recommended that regenerated the issued certificate using the right properties.</p>

<h1 id="toc_4">Reference</h1>
<p>[1] Java Docker API Client <a href="https://github.com/docker-java/docker-java">github.com/docker-java/docker-java</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Java&#39;s Hostname Resolving Problem]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2019/04/17/java_ptr_issue.html"/>
        <published>2019-04-17T00:00:00+08:00</published>
        <updated>2019-04-17T19:09:51+08:00</updated>
        <id>https://jasonjoo2010.github.io/2019/04/17/java_ptr_issue.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/inetaddress/" term="InetAddress" label="InetAddress" />
        <category scheme="https://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Abstract</h1>
<p>Java 8 on CentOS 5 will do extra PTR lookup when executing <code>InetAddress.getAllByName</code> for resolving. The extra PTR lookup will cause poor performance. We need replace it to custom implementation using custom name service or downgrade back to <strong>Java 7</strong>.  </p>
<p>Java 7/8 or newer on CentOS 7 have no such issue.</p>

<h1 id="toc_1">Issue</h1>
<p>Recently the latency of some API in production are deteriorated as Figure 1 shown:  </p>
<p><img src="Figure1.png" alt="Figure 1"/> </p>
<p>No change in relevant code and no change on cluster environment. It&#39;s strange. So a two-day-figuring journey begun.</p>

<h1 id="toc_2">Locate The Code Block</h1>

<h2 id="toc_3">Using Logging</h2>
<p>It seems like an easy problem so i add several logging lines with execution timing. They cut the logic into several parts. And finally we arrived here:  </p>
<div class="highlight"><pre><span></span><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">HttpClientUtil</span><span class="p">.</span><span class="na">postRequest</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
<span class="n">JSONObject</span> <span class="n">jsonObject</span> <span class="o">=</span> <span class="n">JSONObject</span><span class="p">.</span><span class="na">parseObject</span><span class="p">(</span><span class="n">json</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">jsonObject</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jsonObject</span><span class="p">.</span><span class="na">containsKey</span><span class="p">(</span><span class="s">&quot;data&quot;</span><span class="p">))</span> <span class="p">{</span>
 <span class="n">JSONObject</span> <span class="n">dataObject</span> <span class="o">=</span> <span class="n">jsonObject</span><span class="p">.</span><span class="na">getJSONObject</span><span class="p">(</span><span class="s">&quot;data&quot;</span><span class="p">);</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">dataObject</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">dataObject</span><span class="p">.</span><span class="na">containsKey</span><span class="p">(</span><span class="s">&quot;oriPic&quot;</span><span class="p">))</span> <span class="p">{</span>
     <span class="n">String</span> <span class="n">pic</span> <span class="o">=</span> <span class="n">dataObject</span><span class="p">.</span><span class="na">getString</span><span class="p">(</span><span class="s">&quot;oriPic&quot;</span><span class="p">);</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">StringUtils</span><span class="p">.</span><span class="na">isNotEmpty</span><span class="p">(</span><span class="n">pic</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">return</span> <span class="n">SearchUtils</span><span class="p">.</span><span class="na">IMG_HOST</span> <span class="o">+</span> <span class="n">pic</span><span class="p">;</span>
     <span class="p">}</span>
 <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>The api outside also has performance statistic as Figure 2:  </p>
<p><img src="Figure2.png" alt="Figure 2"/>  </p>
<p>Which means it&#39;s running good(avg &lt; 10ms).<br/>
So I add a timeout(2 seconds) to make it better first as:  </p>
<div class="highlight"><pre><span></span><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">HttpClientUtil</span><span class="p">.</span><span class="na">postRequest</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">map</span><span class="p">,</span> <span class="mi">2000</span><span class="p">);</span>
</pre></div>
<p>But things have not changed.<br/>
So I dug in the access logs for global view and found:  </p>

<pre><code>20190415155616  0.602
20190415155628  0.094
20190415155631  0.234
20190415155632  21.892
20190415155632  1.852
20190415155650  0.04
20190415155652  0.017
20190415155654  0.282
20190415155701  0.18
20190415155720  0.484
20190415155735  0.28
20190415155756  0.04
20190415155809  0.295
20190415155814  0.342
20190415155840  0.104
20190415155849  0.081
20190415155854  21.612
20190415155854  20.648
20190415155856  21.539
20190415155858  0.538
20190415155901  0.04
20190415155904  0.223
20190415155906  0.04
20190415155915  0.687
20190415155949  0.038
20190415155954  0.436</code></pre>
<p>There are some <strong>extremely</strong> slow requests. It seems like the <strong>timeout</strong> doesn&#39;t act what i expect. It turns to be complicated because <code>HttpClientUtil</code> is a common util widely used and it should not have such bug. So i turn to Arthas[1] to go deeper.</p>

<h2 id="toc_4">Using Arthas</h2>

<h3 id="toc_5">Intro</h3>
<p>Arthas is a Java Diagnostic tool open sourced by Alibaba.  </p>
<p>Arthas allows developers to troubleshoot production issues for Java applications without modifying code or restarting servers.  </p>
<p>Github: <a href="https://github.com/alibaba/arthas">github.com/alibaba/arthas</a>  </p>
<p>It&#39;s a great help in this case.</p>

<h3 id="toc_6">Go Deeper</h3>
<p>After step-by-step debugging with the commands of <code>watch</code> and <code>trace</code> finally arrived:  </p>
<p><img src="Figure3.png" alt="Figure 3"/>  </p>
<p>Because <code>Arthas</code> cannot advise system api so the issue focused on <code>InetAddress.getAllByName</code> now.  </p>
<p><code>getAllByName</code> is used to convert/resolve hostname into ip address. But tests show that dns server has no problem:  </p>
<div class="highlight"><pre><span></span><span class="o">[</span>root@peon1 ~<span class="o">]</span><span class="c1"># time nslookup google.com</span>
Server:     <span class="m">172</span>.16.1.2
Address:    <span class="m">172</span>.16.1.2#53

Non-authoritative answer:
Name:   google.com
Address: <span class="m">216</span>.58.197.110


real    0m0.011s
user    0m0.000s
sys 0m0.000s
</pre></div>
<p>Then I use <code>tcpdump</code> to see what happens actually and find the problem:  </p>

<pre><code>10:59:32.809499 IP (...) 172.16.2.4.64563 &gt; 172.16.1.2.53: [udp sum ok]  19342+ A? ******.com. (37)
10:59:32.809966 IP (...) 172.16.1.2.53 &gt; 172.16.2.4.64563:  19342 q: A? ******.com. 2/2/18 ******.com. A aa.bb.cc.dd, [|domain]
10:59:32.810303 IP (...) 172.16.2.4.12547 &gt; 172.16.1.3.53: [udp sum ok]  8474+ PTR? dd.cc.bb.aa.in-addr.arpa. (44)
problem &gt;&gt;&gt; 11:00:01.118759 IP (...) 172.16.1.3.53 &gt; 172.16.2.4.12547: [udp sum ok]  8474 ServFail q: PTR? dd.cc.bb.aa.in-addr.arpa. 0/0/0 (44)</code></pre>
<p>Wtf? Why it perform a <code>PTR</code>[2] lookup?<br/>
It can be reproduce by:  </p>
<div class="highlight"><pre><span></span><span class="o">[</span>root@peon1 ~<span class="o">]</span><span class="c1"># time nslookup aa.bb.cc.dd</span>
<span class="p">;;</span> Got SERVFAIL reply from <span class="m">172</span>.16.1.2, trying next server
<span class="p">;;</span> connection timed out<span class="p">;</span> no servers could be reached


real    0m20.296s
user    0m0.000s
sys 0m0.000s
</pre></div>
<p>Generally we don&#39;t need a PTR lookup when performing a normal http request. So that is the problem.  </p>

<h1 id="toc_7">Environment Research</h1>
<p>I write a test to reproduce the issue between different versions and environments:  </p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.net.InetAddress</span><span class="p">;</span>
<span class="kn">import</span> <span class="nn">java.net.UnknownHostException</span><span class="p">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="p">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="p">,</span> <span class="n">UnknownHostException</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">InetAddress</span><span class="p">.</span><span class="na">getAllByName</span><span class="p">(</span><span class="s">&quot;google.com&quot;</span><span class="p">);</span>
            <span class="n">Thread</span><span class="p">.</span><span class="na">sleep</span><span class="p">(</span><span class="mi">40000</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>I run it on CentOS 5/7 and Java 7/8:</p>

<table><thead>
<tr>
<th>-</th>
<th>CentOS 5</th>
<th>CentOS 7</th>
</tr>
</thead><tbody>
<tr>
<td>Java 7</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Java 8</td>
<td>PTR Lookup</td>
<td>-</td>
</tr>
</tbody></table>
<p>After some tests it seems like problems only exist when using Java 8 on CentOS 5. And I also write a C test to make sure relevant system api works correctly:</p>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;errno.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;netdb.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;arpa/inet.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp"></span>

<span class="kt">void</span> <span class="nf">resolve</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">hostent</span> <span class="o">*</span><span class="n">he</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">in_addr</span> <span class="o">**</span><span class="n">addr_list</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">he</span> <span class="o">=</span> <span class="n">gethostbyname</span><span class="p">(</span><span class="s">&quot;google.com&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">he</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;resolve error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">addr_list</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="nc">in_addr</span> <span class="o">**</span><span class="p">)</span><span class="n">he</span><span class="o">-&gt;</span><span class="n">h_addr_list</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">addr_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">inet_ntoa</span><span class="p">(</span><span class="o">*</span><span class="n">addr_list</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">resolve</span><span class="p">();</span>
        <span class="n">sleep</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>It hasn&#39;t similar issues both on CentOS 5/7.</p>

<h1 id="toc_8">Solution</h1>
<p>Things go right after changing the default JDK to <code>1.7.0_71</code>.(Only on CentOS 5.x)</p>

<h1 id="toc_9">Question Remained</h1>
<p>What&#39;s the real difference in JNI implementation between 7/8 which causes this issue on specific condition?</p>

<h1 id="toc_10">Reference</h1>
<p>[1] Arthas JVM Debugger <a href="https://github.com/alibaba/arthas">github.com/alibaba/arthas</a><br/>
[2] Reverse DNS lookup <a href="https://en.wikipedia.org/wiki/Reverse_DNS_lookup">en.wikipedia.org/wiki/Reverse_DNS_lookup</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[IPDB Structure]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2019/01/24/ipdb_structure.html"/>
        <published>2019-01-24T00:00:00+08:00</published>
        <updated>2020-06-22T15:00:35+08:00</updated>
        <id>https://jasonjoo2010.github.io/2019/01/24/ipdb_structure.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/ipdb/" term="ipdb" label="ipdb" />
        <category scheme="https://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Intro</h1>
<p>IPDB is a new file format from <a href="https://ipip.net">ipip.net</a> storing ip geo data.<br/>
It can support <code>more records</code> and <code>IPV4</code> records compared to old format <code>dat</code>.<br/>
Though there are kinds of resolver libraries on official website(Which can be found at <a href="https://www.ipip.net/support/code.html">www.ipip.net/support/code.html</a>) but there was no document on structure of it yet.  </p>
<p>Actually if you want to improve the performance or make a custom implementation it will be better if there was one. So i spent some time comparing the hex of file and the java code provided officially and write it down.  </p>

<pre><code>Note: This document is based on the free library which contains IPV4 data only.</code></pre>

<h1 id="toc_1">File Structure</h1>
<p><img src="File.png" alt="File"/>  </p>

<h2 id="toc_2">Meta</h2>
<p>A json string like:  </p>
<div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;build&quot;</span><span class="p">:</span> <span class="mi">1547017060</span><span class="p">,</span>
    <span class="nt">&quot;ip_version&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;languages&quot;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&quot;CN&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">},</span>
    <span class="nt">&quot;node_count&quot;</span><span class="p">:</span> <span class="mi">411432</span><span class="p">,</span>
    <span class="nt">&quot;total_size&quot;</span><span class="p">:</span> <span class="mi">3330322</span><span class="p">,</span>
    <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&quot;country_name&quot;</span><span class="p">,</span>
        <span class="s2">&quot;region_name&quot;</span><span class="p">,</span>
        <span class="s2">&quot;city_name&quot;</span>
    <span class="p">]</span>
<span class="p">}</span>
</pre></div>

<h1 id="toc_3">Data</h1>
<p><img src="Data.png" alt="Data"/>  </p>

<h2 id="toc_4">Node</h2>
<p><img src="Node.png" alt="Node"/>  </p>
<p>Node is a 8 bytes record.<br/>
Generally first part is <code>index</code> while second part is <code>position</code>.<br/>
But <code>the order of index and position is inverted</code> when index value is greater or equal then <code>80</code>. Maybe they changed the format for some reasons and here is for backward compatibility.</p>
<p>Indexes between 0 ~ 96(not included) are for IPV4 verification(real index nodes should be located after traversal): </p>
<p>![Node structure between <a href="Node1.png">0, 96)</a></p>
<p>Then the real indexes start from index 96. In summary the structure is:</p>
<p><img src="Structure.png" alt="Nodes and data"/> </p>
<p>The structure of data indexes is a tree based on each bit of ip address from bit0 to bit31. The maximum depth is 32 and it terminates at the index of next node which will beyond the maximum index(node_count in meta).</p>
<p><img src="Tree.png" alt="Tree"/> </p>

<h2 id="toc_5">Data Entry</h2>
<p>The result is stored in data entry separated by TAB in UTF-8 charset. First 2 bytes store the length of string followed.</p>
<p><img src="DataEntry.png" alt="Data Entry"/> </p>

<h1 id="toc_6">Optimization</h1>
<p>For best practice there are mainly two spots we can introduce a cache for.</p>
<p>First is the depth of the tree. We can reduce it from 32 in maximum to 16 after introducing a 16 bits cache, that is, 65535 entries. We can build it once when loading into memory. It can help taking 50% off in time complexity.</p>
<p>Second is we can build a LRU data cache because there are duplicated locations that different addresses point to. </p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Why We Need Monitoring Druid]]></title>
        <author><name>Jason</name></author>
        <link href="https://jasonjoo2010.github.io/2018/12/29/why_we_need_monitoring_druid.html"/>
        <published>2018-12-29T00:00:00+08:00</published>
        <updated>2019-01-02T11:06:29+08:00</updated>
        <id>https://jasonjoo2010.github.io/2018/12/29/why_we_need_monitoring_druid.html</id>
        <category scheme="https://jasonjoo2010.github.io/tag/druid/" term="druid" label="druid" />
        <category scheme="https://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="https://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Issue occurred</h1>
<p>Recently there is a very strange problem happening every night on about 20:00:05. The <code>SELECTED</code> provider (DUBBO) will reach the capacity of DUBBO thread pool which is limit to <strong>2000</strong> threads and in <strong>fixed</strong> pool model. Most of them blocked in the position of fetching connections through druid:</p>
<div class="highlight"><pre><span></span><span class="o">-</span>  <span class="n">waiting</span> <span class="n">on</span> <span class="n">java</span><span class="p">.</span><span class="na">util</span><span class="p">.</span><span class="na">concurrent</span><span class="p">.</span><span class="na">locks</span><span class="p">.</span><span class="na">AbstractQueuedSynchronizer$ConditionObject</span><span class="err">@</span><span class="mi">63</span><span class="n">c4ac4b</span>
        <span class="n">at</span> <span class="n">java</span><span class="p">.</span><span class="na">util</span><span class="p">.</span><span class="na">concurrent</span><span class="p">.</span><span class="na">locks</span><span class="p">.</span><span class="na">LockSupport</span><span class="p">.</span><span class="na">parkNanos</span><span class="p">(</span><span class="n">LockSupport</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">215</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">java</span><span class="p">.</span><span class="na">util</span><span class="p">.</span><span class="na">concurrent</span><span class="p">.</span><span class="na">locks</span><span class="p">.</span><span class="na">AbstractQueuedSynchronizer$ConditionObject</span><span class="p">.</span><span class="na">awaitNanos</span><span class="p">(</span><span class="n">AbstractQueuedSynchronizer</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">2078</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="p">.</span><span class="na">alibaba</span><span class="p">.</span><span class="na">druid</span><span class="p">.</span><span class="na">pool</span><span class="p">.</span><span class="na">DruidDataSource</span><span class="p">.</span><span class="na">pollLast</span><span class="p">(</span><span class="n">DruidDataSource</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">1479</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="p">.</span><span class="na">alibaba</span><span class="p">.</span><span class="na">druid</span><span class="p">.</span><span class="na">pool</span><span class="p">.</span><span class="na">DruidDataSource</span><span class="p">.</span><span class="na">getConnectionInternal</span><span class="p">(</span><span class="n">DruidDataSource</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">1079</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="p">.</span><span class="na">alibaba</span><span class="p">.</span><span class="na">druid</span><span class="p">.</span><span class="na">pool</span><span class="p">.</span><span class="na">DruidDataSource</span><span class="p">.</span><span class="na">getConnectionDirect</span><span class="p">(</span><span class="n">DruidDataSource</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">946</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="p">.</span><span class="na">alibaba</span><span class="p">.</span><span class="na">druid</span><span class="p">.</span><span class="na">filter</span><span class="p">.</span><span class="na">FilterChainImpl</span><span class="p">.</span><span class="na">dataSource_connect</span><span class="p">(</span><span class="n">FilterChainImpl</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">4544</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="p">.</span><span class="na">alibaba</span><span class="p">.</span><span class="na">druid</span><span class="p">.</span><span class="na">filter</span><span class="p">.</span><span class="na">stat</span><span class="p">.</span><span class="na">StatFilter</span><span class="p">.</span><span class="na">dataSource_getConnection</span><span class="p">(</span><span class="n">StatFilter</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">661</span><span class="p">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="p">.</span><span class="na">alibaba</span><span class="p">.</span><span class="na">druid</span><span class="p">.</span><span class="na">filter</span><span class="p">.</span><span class="na">FilterChainImpl</span><span class="p">.</span><span class="na">dataSource_connect</span><span class="p">(</span><span class="n">FilterChainImpl</span><span class="p">.</span><span class="na">java</span><span class="p">:</span><span class="mi">4540</span><span class="p">)</span>
</pre></div>

<h1 id="toc_1">Analysis 1</h1>
<p>First we can find that it seems like many threads stuck inside pollLast(). Precisely on <code>notEmpty.awaitNanos()</code>. Maybe it is caused by some forms of dead lock or racing problem. Which is even more strange why we use <code>SELECTED</code> before there is only <code>ONE</code> node suffered this issue while we have 6 nodes all together.</p>
<p>So There maybe some rarely executed invocation or scheduled task causing this problem.</p>
<p>Currently we use the version <code>1.0.10</code> while the newest release is <code>1.1.12</code>. So we can try to upgrade it.</p>
<p>Besides we can introduce more metrics of the <code>Druid Pool</code> to <code>Open Falcon</code> and see whether there are some other reasons.</p>

<h1 id="toc_2">Next</h1>
<p>We will try:</p>

<ul>
<li>[x] Support monitoring for projects having druid.</li>
<li>[x] Upgrade druid from 1.0.10 to 1.1.12.</li>
<li>[x] Adjust pool&#39;s parameters according to the monitor results.</li>
</ul>

<h2 id="toc_3">NotEmptyWaitCount</h2>
<p>First we found the curve of <code>NotEmptyWaitCount</code> telling that there maybe some problems in the pool at some traffic fluctuation points(Shown below).  </p>
<p><img src="NotEmptyWaitCount.png" alt="NotEmptyWaitCount"/></p>
<p>We can see when sudden traffic incoming the wait count increased.  </p>

<h2 id="toc_4">PhysicalConnect</h2>
<p>And we compared another indicator <code>PhysicalConnect</code>:  </p>
<p><img src="PhysicalConnect.png" alt="PhysicalConnect"/>  </p>
<p>We can also be sure when wait count increased some physical connecting actions were really happened.</p>

<h2 id="toc_5">PoolingCount</h2>
<p>After some iteration of pool parameters including increasing <code>minIdle</code> and <code>initialSize</code> we checked the indicator <code>PoolingCount</code> which can indicate the connection count in idle.  </p>
<p><img src="PoolingCount.png" alt="PoolingCount"/>  </p>
<p>We can see the pool can&#39;t keep the count of idle connections as we expected(minIdle = initialSize = 20). And it keeps changing after some minutes. So if recycleThread didn&#39;t recycle them there must be some other reasons causing them destroyed. And we checked that we enabled <code>testWhileIdle</code> while disabling <code>testOnBorrow</code> and <code>testOnReturn</code>. We thought that idle connections will be checked periodically by setting <code>testWhileIdle</code> but things didn&#39;t indicate the same result.  </p>
<p>After reading the source code for a while we found there was really a misunderstanding on <code>testWhileIdle</code>.</p>

<h1 id="toc_6">Pool Parameters Related</h1>

<h2 id="toc_7">initialSize vs. minIdle</h2>
<p><code>initialSize</code> means when pool starts how many connections will be created.<br/>
<code>minIdle</code> means when evictThread runs how many connections will prevent to be destroyed.  </p>
<p>So generally <code>initialSize</code> may be greater or equals to <code>minIdle</code>.</p>

<h2 id="toc_8">timeBetweenEvictionRunsMillis vs. minEvictableIdleTimeMillis</h2>
<p><code>minEvictableIdleTimeMillis</code> means how long a connection turns to be useless when in idle. But when it&#39;s in <code>minIdle</code> range <strong>it will ignore this</strong>.</p>
<p><code>timeBetweenEvictionRunsMillis</code> means the time between recycle thread&#39;s loop.</p>

<h2 id="toc_9">testWhileIdle vs. testWhileIdle</h2>
<p><code>testWhileIdle</code> doesn&#39;t mean test occurred while a connection is in idle but when a connection is borrowed and has been in idle more then <code>timeBetweenEvictionRunsMillis</code> the connection test will happen.  </p>
<p>That is <strong>test when borrowed a long-idle connection</strong>. The test will only happen in getConnection as <code>testOnBorrow</code> means which is more efficient.  </p>
<p>So if you have some timeout settings on server side you may want to use <code>keepAlive</code>.</p>

<h2 id="toc_10">keepAlive</h2>
<p><code>keepAlive</code> means when a connection is in idle a connection test will happen on it every <code>timeBetweenEvictionRunsMillis</code>. It enhances the recycleThread.  </p>
<p>We can be sure of all idle connections&#39;s status using it.</p>
<p><img src="PoolingCountAfter.png" alt="poolCount&#39;s curve after adding keepAlive"/></p>

<h1 id="toc_11">Conclusion 1</h1>
<p>Connections in idle pool(Which is calculated as <code>poolCount</code>) is not reliable when you turn off <code>testOnBorrow</code>. And if you have some big fluctuations of load, for example, you will also take time to reconnect with turning on <code>testOnBorrow</code>. That  will lead to poor performance when fluctuations occur.  </p>
<p>So we can turn on the <code>keepAlive</code> option to really keep alive the connections in idle (<code>minIdle</code>) to get prepared to the fluctuations.</p>
<div class="highlight"><pre><span></span><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initialSize&quot;</span> <span class="na">value=</span><span class="s">&quot;40&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;40&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxActive&quot;</span> <span class="na">value=</span><span class="s">&quot;1000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWait&quot;</span> <span class="na">value=</span><span class="s">&quot;60000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;180000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;600000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;validationQuery&quot;</span> <span class="na">value=</span><span class="s">&quot;SELECT &#39;x&#39;&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testWhileIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnBorrow&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnReturn&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;keepAlive&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
<p>By the way the problem of <code>NotEmptyWaitCount</code> is solved at the same time.
<img src="NotEmptyWaitCountAfter.png" alt="NotEmptyWaitCountAfter"/></p>

<h1 id="toc_12">Result</h1>
<p>After making some changes of configuration we continue to check the monitor data.</p>
<p><img src="Peak.png" alt="A peak after optimzing configuration"/></p>
<p>The peak shows that it indeed need about 100 connections at that time and cost much time to increase from 40 to 100 connections. Thus because, in <code>CreateThread</code>, one by one.</p>

<h1 id="toc_13">Analysis 2</h1>
<p>So we face two different solutions:  </p>

<ol>
<li>Increase the connection pool from 40 to 100 at least.</li>
<li>Find a way to increase the count of connections in pool to 100 before the peaks coming.</li>
</ol>
<p>The first way is simple but it&#39;s a waste of connection resources in non-peak time. So we&#39;d like following the other way.  </p>
<p>At the end, we create a parametric task to do that which can be change parameter online. Parameter is like <code>1000=100,1157=100,1958=150,2019=150,2130=100,2357=100</code>.  The key is <code>HHmm</code> while the value is filling count of connection pool. So we can <code>warm up</code> the pool before the peak coming.</p>
<p><img src="WarmUpPoolingCount.png" alt="Warm up"/></p>
<p>While the wait count turns to be:  </p>
<p><img src="WaitCount.png" alt="Wait Count"/></p>
<p>We can see there was nearly no wait count after our warming up action before peaks.</p>

<h1 id="toc_14">Conclusion 2</h1>
<p>For summary the route of solving this problem is:</p>

<ol>
<li>Find problem in monitor data of dubbo.</li>
<li>Go deeper in dubbo&#39;s stack dump and <code>jstack</code> using <code>crontab</code>.</li>
<li>Add monitor for druid pool and find out the <code>NotEmptyWaitCount</code> is increasing all the time.</li>
<li>Find the <code>minIdle</code> doesn&#39;t match the physical connection count (from <code>netstat</code>) as expected. And <code>PoolingCount</code> also can&#39;t keep the <code>minIdle</code> value. And more it mainly decreased at 10 minutes point after booted which was <code>minEvictableIdleTimeMillis</code>. So add <code>keepAlive</code> to ensure the connection&#39;s status. <code>PoolingCount</code> can be keep to <code>minIdle</code> after that.</li>
<li>Find <code>PoolingCount</code> increasing to 100 when following peak came. We chose using a <code>warm up</code> job.</li>
<li>Problem is solved finally.<br/></li>
</ol>

<h2 id="toc_15">Important</h2>

<ol>
<li>Monitoring is important. Where your eyes go monitor should follow.</li>
<li>Warming is important. Especially if you don&#39;t want much waste of resources.</li>
</ol>
]]>
        </content>
    </entry>
</feed>