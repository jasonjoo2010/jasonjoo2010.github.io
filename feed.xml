<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jason Joo</title>
    <link href="http://jasonjoo2010.github.io/feed.xml" rel="self" />
    <link href="http://jasonjoo2010.github.io/" />
    <updated>2019-04-17T19:06:15+08:00</updated>
    <id>http://jasonjoo2010.github.io/</id>
    <entry>
        <title type="html"><![CDATA[Java&#39;s Hostname Resolving Problem]]></title>
        <author><name>Jason</name></author>
        <link href="http://jasonjoo2010.github.io/2019/04/17/java_ptr_issue.html"/>
        <published>2019-04-17T00:00:00+08:00</published>
        <updated>2019-04-17T19:06:15+08:00</updated>
        <id>http://jasonjoo2010.github.io/2019/04/17/java_ptr_issue.html</id>
        <category scheme="http://jasonjoo2010.github.io/tag/inetaddress/" term="InetAddress" label="InetAddress" />
        <category scheme="http://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="http://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Abstract</h1>
<p>Java 8 on CentOS 5 will do extra PTR lookup when executing <code>InetAddress.getAllByName</code> for resolving. The extra PTR lookup will cause poor performance. We need replace it to custom implementation using custom name service or downgrade back to <strong>Java 7</strong>.  </p>
<p>Java 7/8 or newer on CentOS 7 have no such issue.</p>

<h1 id="toc_1">Issue</h1>
<p>Recently the latency of some API in production are deteriorated as Figure 1 shown:  </p>
<p><img src="Figure1.png" alt="Figure 1"/> </p>
<p>No change in relevant code and no change on cluster environment. It&#39;s strange. So a two-day-figuring journey begun.</p>

<h1 id="toc_2">Locate The Code Block</h1>

<h2 id="toc_3">Using Logging</h2>
<p>It seems like an easy problem so i add several logging lines with execution timing. They cut the logic into several parts. And finally we arrived here:  </p>
<div class="highlight"><pre><span></span><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">HttpClientUtil</span><span class="o">.</span><span class="na">postRequest</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">map</span><span class="o">);</span>
<span class="n">JSONObject</span> <span class="n">jsonObject</span> <span class="o">=</span> <span class="n">JSONObject</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>
<span class="k">if</span> <span class="o">(</span><span class="n">jsonObject</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">jsonObject</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">))</span> <span class="o">{</span>
 <span class="n">JSONObject</span> <span class="n">dataObject</span> <span class="o">=</span> <span class="n">jsonObject</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">);</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">dataObject</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">dataObject</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;oriPic&quot;</span><span class="o">))</span> <span class="o">{</span>
     <span class="n">String</span> <span class="n">pic</span> <span class="o">=</span> <span class="n">dataObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;oriPic&quot;</span><span class="o">);</span>
     <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="o">(</span><span class="n">pic</span><span class="o">))</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">SearchUtils</span><span class="o">.</span><span class="na">IMG_HOST</span> <span class="o">+</span> <span class="n">pic</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
<span class="o">}</span>
</pre></div>
<p>The api outside also has performance statistic as Figure 2:  </p>
<p><img src="Figure2.png" alt="Figure 2"/>  </p>
<p>Which means it&#39;s running good(avg &lt; 10ms).<br/>
So I add a timeout(2 seconds) to make it better first as:  </p>
<div class="highlight"><pre><span></span><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">HttpClientUtil</span><span class="o">.</span><span class="na">postRequest</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">map</span><span class="o">,</span> <span class="mi">2000</span><span class="o">);</span>
</pre></div>
<p>But things have not changed.<br/>
So I dug in the access logs for global view and found:  </p>

<pre><code>20190415155616  0.602
20190415155628  0.094
20190415155631  0.234
20190415155632  21.892
20190415155632  1.852
20190415155650  0.04
20190415155652  0.017
20190415155654  0.282
20190415155701  0.18
20190415155720  0.484
20190415155735  0.28
20190415155756  0.04
20190415155809  0.295
20190415155814  0.342
20190415155840  0.104
20190415155849  0.081
20190415155854  21.612
20190415155854  20.648
20190415155856  21.539
20190415155858  0.538
20190415155901  0.04
20190415155904  0.223
20190415155906  0.04
20190415155915  0.687
20190415155949  0.038
20190415155954  0.436</code></pre>
<p>There are some <strong>extremely</strong> slow requests. It seems like the <strong>timeout</strong> doesn&#39;t act what i expect. It turns to be complicated because <code>HttpClientUtil</code> is a common util widely used and it should not have such bug. So i turn to Arthas[1] to go deeper.</p>

<h2 id="toc_4">Using Arthas</h2>

<h3 id="toc_5">Intro</h3>
<p>Arthas is a Java Diagnostic tool open sourced by Alibaba.  </p>
<p>Arthas allows developers to troubleshoot production issues for Java applications without modifying code or restarting servers.  </p>
<p>Github: <a href="https://github.com/alibaba/arthas">github.com/alibaba/arthas</a>  </p>
<p>It&#39;s a great help in this case.</p>

<h3 id="toc_6">Go Deeper</h3>
<p>After step-by-step debugging with the commands of <code>watch</code> and <code>trace</code> finally arrived:  </p>
<p><img src="Figure3.png" alt="Figure 3"/>  </p>
<p>Because <code>Arthas</code> cannot advise system api so the issue focused on <code>InetAddress.getAllByName</code> now.  </p>
<p><code>getAllByName</code> is used to convert/resolve hostname into ip address. But tests show that dns server has no problem:  </p>
<div class="highlight"><pre><span></span><span class="o">[</span>root@peon1 ~<span class="o">]</span><span class="c1"># time nslookup google.com</span>
Server:     <span class="m">172</span>.16.1.2
Address:    <span class="m">172</span>.16.1.2#53

Non-authoritative answer:
Name:   google.com
Address: <span class="m">216</span>.58.197.110


real    0m0.011s
user    0m0.000s
sys 0m0.000s
</pre></div>
<p>Then I use <code>tcpdump</code> to see what happens actually and find the problem:  </p>

<pre><code>10:59:32.809499 IP (...) 172.16.2.4.64563 &gt; 172.16.1.2.53: [udp sum ok]  19342+ A? ******.com. (37)
10:59:32.809966 IP (...) 172.16.1.2.53 &gt; 172.16.2.4.64563:  19342 q: A? ******.com. 2/2/18 ******.com. A aa.bb.cc.dd, [|domain]
10:59:32.810303 IP (...) 172.16.2.4.12547 &gt; 172.16.1.3.53: [udp sum ok]  8474+ PTR? dd.cc.bb.aa.in-addr.arpa. (44)
problem &gt;&gt;&gt; 11:00:01.118759 IP (...) 172.16.1.3.53 &gt; 172.16.2.4.12547: [udp sum ok]  8474 ServFail q: PTR? dd.cc.bb.aa.in-addr.arpa. 0/0/0 (44)</code></pre>
<p>Wtf? Why it perform a <code>PTR</code>[2] lookup?<br/>
It can be reproduce by:  </p>
<div class="highlight"><pre><span></span><span class="o">[</span>root@peon1 ~<span class="o">]</span><span class="c1"># time nslookup aa.bb.cc.dd</span>
<span class="p">;;</span> Got SERVFAIL reply from <span class="m">172</span>.16.1.2, trying next server
<span class="p">;;</span> connection timed out<span class="p">;</span> no servers could be reached


real    0m20.296s
user    0m0.000s
sys 0m0.000s
</pre></div>
<p>Generally we don&#39;t need a PTR lookup when performing a normal http request. So that is the problem.  </p>

<h1 id="toc_7">Environment Research</h1>
<p>I write a test to reproduce the issue between different versions and environments:  </p>
<div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">java.net.InetAddress</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.net.UnknownHostException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">UnknownHostException</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">InetAddress</span><span class="o">.</span><span class="na">getAllByName</span><span class="o">(</span><span class="s">&quot;google.com&quot;</span><span class="o">);</span>
            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">40000</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
<p>I run it on CentOS 5/7 and Java 7/8:</p>

<table><thead>
<tr>
<th>-</th>
<th>CentOS 5</th>
<th>CentOS 7</th>
</tr>
</thead><tbody>
<tr>
<td>Java 7</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Java 8</td>
<td>PTR Lookup</td>
<td>-</td>
</tr>
</tbody></table>
<p>After some tests it seems like problems only exist when using Java 8 on CentOS 5. And I also write a C test to make sure relevant system api works correctly:</p>
<div class="highlight"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;errno.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;netdb.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;arpa/inet.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp"></span>

<span class="kt">void</span> <span class="nf">resolve</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">hostent</span> <span class="o">*</span><span class="n">he</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">in_addr</span> <span class="o">**</span><span class="n">addr_list</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">he</span> <span class="o">=</span> <span class="n">gethostbyname</span><span class="p">(</span><span class="s">&quot;google.com&quot;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">he</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;resolve error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">addr_list</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">in_addr</span> <span class="o">**</span><span class="p">)</span><span class="n">he</span><span class="o">-&gt;</span><span class="n">h_addr_list</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">addr_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">inet_ntoa</span><span class="p">(</span><span class="o">*</span><span class="n">addr_list</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">resolve</span><span class="p">();</span>
        <span class="n">sleep</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>It hasn&#39;t similar issues both on CentOS 5/7.</p>

<h1 id="toc_8">Solution</h1>
<p>Things go right after changing the default JDK to <code>1.7.0_71</code>.(Only on CentOS 5.x)</p>

<h1 id="toc_9">Question Remained</h1>
<p>What&#39;s the real difference in JNI implementation between 7/8 which causes this issue on specific condition?</p>

<h1 id="toc_10">Reference</h1>
<p>[1] Arthas JVM Debugger <a href="https://github.com/alibaba/arthas">github.com/alibaba/arthas</a>
[2] Reverse DNS lookup <a href="https://en.wikipedia.org/wiki/Reverse_DNS_lookup">en.wikipedia.org/wiki/Reverse_DNS_lookup</a></p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[IPDB Structure]]></title>
        <author><name>Jason</name></author>
        <link href="http://jasonjoo2010.github.io/2019/01/24/ipdb_structure.html"/>
        <published>2019-01-24T00:00:00+08:00</published>
        <updated>2019-03-04T09:47:51+08:00</updated>
        <id>http://jasonjoo2010.github.io/2019/01/24/ipdb_structure.html</id>
        <category scheme="http://jasonjoo2010.github.io/tag/ipdb/" term="ipdb" label="ipdb" />
        <category scheme="http://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="http://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Intro</h1>
<p>IPDB is a new file format from <a href="https://ipip.net">ipip.net</a> storing ip geo data.<br/>
It can support <code>more records</code> and <code>IPV4</code> records compared to old format <code>dat</code>.<br/>
Though there are kinds of resolver libraries on official website(Which can be found at <a href="https://www.ipip.net/support/code.html">www.ipip.net/support/code.html</a>) but there was no document on structure of it yet.  </p>
<p>Actually if you want to improve the performance or make a custom implementation it will be better if there was one. So i spent some time comparing the hex of file and the java code provided officially and write it down.  </p>

<pre><code>Note: This document is based on the free library which contains IPV4 data only.</code></pre>

<h1 id="toc_1">File Structure</h1>
<p><img src="File.png" alt="File"/>  </p>

<h2 id="toc_2">Meta</h2>
<p>A json string like:  </p>
<div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="nt">&quot;build&quot;</span><span class="p">:</span> <span class="mi">1547017060</span><span class="p">,</span>
    <span class="nt">&quot;ip_version&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&quot;languages&quot;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&quot;CN&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">},</span>
    <span class="nt">&quot;node_count&quot;</span><span class="p">:</span> <span class="mi">411432</span><span class="p">,</span>
    <span class="nt">&quot;total_size&quot;</span><span class="p">:</span> <span class="mi">3330322</span><span class="p">,</span>
    <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&quot;country_name&quot;</span><span class="p">,</span>
        <span class="s2">&quot;region_name&quot;</span><span class="p">,</span>
        <span class="s2">&quot;city_name&quot;</span>
    <span class="p">]</span>
<span class="p">}</span>
</pre></div>

<h1 id="toc_3">Data</h1>
<p><img src="Data.png" alt="Data"/>  </p>

<h2 id="toc_4">Node</h2>
<p><img src="Node.png" alt="Node"/>  </p>
<p>Node is a 8 bytes record.<br/>
Generally first part is <code>index</code> while second part is <code>position</code>.<br/>
But <code>the order of index and position is inverted</code> when index value is greater or equal then <code>80</code>. Maybe they changed the format for some reasons and here is for backward compatibility.</p>
<p>Indexes between 0 ~ 96(not included) are for IPV4.</p>
<p>Normally <code>Node</code> is a link chain but when </p>
]]>
        </content>
    </entry><entry>
        <title type="html"><![CDATA[Why We Need Monitoring Druid]]></title>
        <author><name>Jason</name></author>
        <link href="http://jasonjoo2010.github.io/2018/12/29/why_we_need_monitoring_druid.html"/>
        <published>2018-12-29T00:00:00+08:00</published>
        <updated>2019-01-02T11:06:29+08:00</updated>
        <id>http://jasonjoo2010.github.io/2018/12/29/why_we_need_monitoring_druid.html</id>
        <category scheme="http://jasonjoo2010.github.io/tag/druid/" term="druid" label="druid" />
        <category scheme="http://jasonjoo2010.github.io/tag/java/" term="java" label="java" />
        <content type="html" xml:base="http://jasonjoo2010.github.io/" xml:lang="en">
            <![CDATA[ <h1 id="toc_0">Issue occurred</h1>
<p>Recently there is a very strange problem happening every night on about 20:00:05. The <code>SELECTED</code> provider (DUBBO) will reach the capacity of DUBBO thread pool which is limit to <strong>2000</strong> threads and in <strong>fixed</strong> pool model. Most of them blocked in the position of fetching connections through druid:</p>
<div class="highlight"><pre><span></span><span class="o">-</span>  <span class="n">waiting</span> <span class="n">on</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">locks</span><span class="o">.</span><span class="na">AbstractQueuedSynchronizer$ConditionObject</span><span class="err">@</span><span class="mi">63</span><span class="n">c4ac4b</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">locks</span><span class="o">.</span><span class="na">LockSupport</span><span class="o">.</span><span class="na">parkNanos</span><span class="o">(</span><span class="n">LockSupport</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">215</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">locks</span><span class="o">.</span><span class="na">AbstractQueuedSynchronizer$ConditionObject</span><span class="o">.</span><span class="na">awaitNanos</span><span class="o">(</span><span class="n">AbstractQueuedSynchronizer</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">2078</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">alibaba</span><span class="o">.</span><span class="na">druid</span><span class="o">.</span><span class="na">pool</span><span class="o">.</span><span class="na">DruidDataSource</span><span class="o">.</span><span class="na">pollLast</span><span class="o">(</span><span class="n">DruidDataSource</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1479</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">alibaba</span><span class="o">.</span><span class="na">druid</span><span class="o">.</span><span class="na">pool</span><span class="o">.</span><span class="na">DruidDataSource</span><span class="o">.</span><span class="na">getConnectionInternal</span><span class="o">(</span><span class="n">DruidDataSource</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1079</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">alibaba</span><span class="o">.</span><span class="na">druid</span><span class="o">.</span><span class="na">pool</span><span class="o">.</span><span class="na">DruidDataSource</span><span class="o">.</span><span class="na">getConnectionDirect</span><span class="o">(</span><span class="n">DruidDataSource</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">946</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">alibaba</span><span class="o">.</span><span class="na">druid</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">FilterChainImpl</span><span class="o">.</span><span class="na">dataSource_connect</span><span class="o">(</span><span class="n">FilterChainImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">4544</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">alibaba</span><span class="o">.</span><span class="na">druid</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">stat</span><span class="o">.</span><span class="na">StatFilter</span><span class="o">.</span><span class="na">dataSource_getConnection</span><span class="o">(</span><span class="n">StatFilter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">661</span><span class="o">)</span>
        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">alibaba</span><span class="o">.</span><span class="na">druid</span><span class="o">.</span><span class="na">filter</span><span class="o">.</span><span class="na">FilterChainImpl</span><span class="o">.</span><span class="na">dataSource_connect</span><span class="o">(</span><span class="n">FilterChainImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">4540</span><span class="o">)</span>
</pre></div>

<h1 id="toc_1">Analysis 1</h1>
<p>First we can find that it seems like many threads stuck inside pollLast(). Precisely on <code>notEmpty.awaitNanos()</code>. Maybe it is caused by some forms of dead lock or racing problem. Which is even more strange why we use <code>SELECTED</code> before there is only <code>ONE</code> node suffered this issue while we have 6 nodes all together.</p>
<p>So There maybe some rarely executed invocation or scheduled task causing this problem.</p>
<p>Currently we use the version <code>1.0.10</code> while the newest release is <code>1.1.12</code>. So we can try to upgrade it.</p>
<p>Besides we can introduce more metrics of the <code>Druid Pool</code> to <code>Open Falcon</code> and see whether there are some other reasons.</p>

<h1 id="toc_2">Next</h1>
<p>We will try:</p>

<ul>
<li>[x] Support monitoring for projects having druid.</li>
<li>[x] Upgrade druid from 1.0.10 to 1.1.12.</li>
<li>[x] Adjust pool&#39;s parameters according to the monitor results.</li>
</ul>

<h2 id="toc_3">NotEmptyWaitCount</h2>
<p>First we found the curve of <code>NotEmptyWaitCount</code> telling that there maybe some problems in the pool at some traffic fluctuation points(Shown below).  </p>
<p><img src="NotEmptyWaitCount.png" alt="NotEmptyWaitCount"/></p>
<p>We can see when sudden traffic incoming the wait count increased.  </p>

<h2 id="toc_4">PhysicalConnect</h2>
<p>And we compared another indicator <code>PhysicalConnect</code>:  </p>
<p><img src="PhysicalConnect.png" alt="PhysicalConnect"/>  </p>
<p>We can also be sure when wait count increased some physical connecting actions were really happened.</p>

<h2 id="toc_5">PoolingCount</h2>
<p>After some iteration of pool parameters including increasing <code>minIdle</code> and <code>initialSize</code> we checked the indicator <code>PoolingCount</code> which can indicate the connection count in idle.  </p>
<p><img src="PoolingCount.png" alt="PoolingCount"/>  </p>
<p>We can see the pool can&#39;t keep the count of idle connections as we expected(minIdle = initialSize = 20). And it keeps changing after some minutes. So if recycleThread didn&#39;t recycle them there must be some other reasons causing them destroyed. And we checked that we enabled <code>testWhileIdle</code> while disabling <code>testOnBorrow</code> and <code>testOnReturn</code>. We thought that idle connections will be checked periodically by setting <code>testWhileIdle</code> but things didn&#39;t indicate the same result.  </p>
<p>After reading the source code for a while we found there was really a misunderstanding on <code>testWhileIdle</code>.</p>

<h1 id="toc_6">Pool Parameters Related</h1>

<h2 id="toc_7">initialSize vs. minIdle</h2>
<p><code>initialSize</code> means when pool starts how many connections will be created.<br/>
<code>minIdle</code> means when evictThread runs how many connections will prevent to be destroyed.  </p>
<p>So generally <code>initialSize</code> may be greater or equals to <code>minIdle</code>.</p>

<h2 id="toc_8">timeBetweenEvictionRunsMillis vs. minEvictableIdleTimeMillis</h2>
<p><code>minEvictableIdleTimeMillis</code> means how long a connection turns to be useless when in idle. But when it&#39;s in <code>minIdle</code> range <strong>it will ignore this</strong>.</p>
<p><code>timeBetweenEvictionRunsMillis</code> means the time between recycle thread&#39;s loop.</p>

<h2 id="toc_9">testWhileIdle vs. testWhileIdle</h2>
<p><code>testWhileIdle</code> doesn&#39;t mean test occurred while a connection is in idle but when a connection is borrowed and has been in idle more then <code>timeBetweenEvictionRunsMillis</code> the connection test will happen.  </p>
<p>That is <strong>test when borrowed a long-idle connection</strong>. The test will only happen in getConnection as <code>testOnBorrow</code> means which is more efficient.  </p>
<p>So if you have some timeout settings on server side you may want to use <code>keepAlive</code>.</p>

<h2 id="toc_10">keepAlive</h2>
<p><code>keepAlive</code> means when a connection is in idle a connection test will happen on it every <code>timeBetweenEvictionRunsMillis</code>. It enhances the recycleThread.  </p>
<p>We can be sure of all idle connections&#39;s status using it.</p>
<p><img src="PoolingCountAfter.png" alt="poolCount&#39;s curve after adding keepAlive"/></p>

<h1 id="toc_11">Conclusion 1</h1>
<p>Connections in idle pool(Which is calculated as <code>poolCount</code>) is not reliable when you turn off <code>testOnBorrow</code>. And if you have some big fluctuations of load, for example, you will also take time to reconnect with turning on <code>testOnBorrow</code>. That  will lead to poor performance when fluctuations occur.  </p>
<p>So we can turn on the <code>keepAlive</code> option to really keep alive the connections in idle (<code>minIdle</code>) to get prepared to the fluctuations.</p>
<div class="highlight"><pre><span></span><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initialSize&quot;</span> <span class="na">value=</span><span class="s">&quot;40&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;40&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxActive&quot;</span> <span class="na">value=</span><span class="s">&quot;1000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWait&quot;</span> <span class="na">value=</span><span class="s">&quot;60000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;180000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;600000&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;validationQuery&quot;</span> <span class="na">value=</span><span class="s">&quot;SELECT &#39;x&#39;&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testWhileIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnBorrow&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnReturn&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;keepAlive&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
<p>By the way the problem of <code>NotEmptyWaitCount</code> is solved at the same time.
<img src="NotEmptyWaitCountAfter.png" alt="NotEmptyWaitCountAfter"/></p>

<h1 id="toc_12">Result</h1>
<p>After making some changes of configuration we continue to check the monitor data.</p>
<p><img src="Peak.png" alt="A peak after optimzing configuration"/></p>
<p>The peak shows that it indeed need about 100 connections at that time and cost much time to increase from 40 to 100 connections. Thus because, in <code>CreateThread</code>, one by one.</p>

<h1 id="toc_13">Analysis 2</h1>
<p>So we face two different solutions:  </p>

<ol>
<li>Increase the connection pool from 40 to 100 at least.</li>
<li>Find a way to increase the count of connections in pool to 100 before the peaks coming.</li>
</ol>
<p>The first way is simple but it&#39;s a waste of connection resources in non-peak time. So we&#39;d like following the other way.  </p>
<p>At the end, we create a parametric task to do that which can be change parameter online. Parameter is like <code>1000=100,1157=100,1958=150,2019=150,2130=100,2357=100</code>.  The key is <code>HHmm</code> while the value is filling count of connection pool. So we can <code>warm up</code> the pool before the peak coming.</p>
<p><img src="WarmUpPoolingCount.png" alt="Warm up"/></p>
<p>While the wait count turns to be:  </p>
<p><img src="WaitCount.png" alt="Wait Count"/></p>
<p>We can see there was nearly no wait count after our warming up action before peaks.</p>

<h1 id="toc_14">Conclusion 2</h1>
<p>For summary the route of solving this problem is:</p>

<ol>
<li>Find problem in monitor data of dubbo.</li>
<li>Go deeper in dubbo&#39;s stack dump and <code>jstack</code> using <code>crontab</code>.</li>
<li>Add monitor for druid pool and find out the <code>NotEmptyWaitCount</code> is increasing all the time.</li>
<li>Find the <code>minIdle</code> doesn&#39;t match the physical connection count (from <code>netstat</code>) as expected. And <code>PoolingCount</code> also can&#39;t keep the <code>minIdle</code> value. And more it mainly decreased at 10 minutes point after booted which was <code>minEvictableIdleTimeMillis</code>. So add <code>keepAlive</code> to ensure the connection&#39;s status. <code>PoolingCount</code> can be keep to <code>minIdle</code> after that.</li>
<li>Find <code>PoolingCount</code> increasing to 100 when following peak came. We chose using a <code>warm up</code> job.</li>
<li>Problem is solved finally.<br/></li>
</ol>

<h2 id="toc_15">Important</h2>

<ol>
<li>Monitoring is important. Where your eyes go monitor should follow.</li>
<li>Warming is important. Especially if you don&#39;t want much waste of resources.</li>
</ol>
]]>
        </content>
    </entry>
</feed>